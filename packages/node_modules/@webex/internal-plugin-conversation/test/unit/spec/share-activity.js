/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
import {ShareActivity} from '@webex/internal-plugin-conversation';
import sinon from 'sinon';
import MockWebex from '@webex/test-helper-mock-webex';

describe('plugin-conversation', () => {
  describe('ShareActivity', () => {
    describe('#_determineContentCategory', () => {
      let sa;

      beforeEach(() => {
        sa = new ShareActivity();
      });

      it('returns "documents" when not all files have a mimeType', () => {
        const items = [
          {mimeType: 'image/png'},
          {}
        ];

        assert.equal(sa._determineContentCategory(items), 'documents');
      });

      it('returns "documents" for non-homogenous mimeTypes', () => {
        const items = [
          {mimeType: 'image/png'},
          {mimeType: 'video/h264'}
        ];

        assert.equal(sa._determineContentCategory(items), 'documents');
      });

      it('returns "documents" if the potentially homogenous mimeType is not image or video', () => {
        const items = [
          {mimeType: 'application/xml'},
          {mimeType: 'application/xml'}
        ];

        assert.equal(sa._determineContentCategory(items), 'documents');
      });

      it('returns "image" if all mimeTypes are image', () => {
        const items = [
          {mimeType: 'image/png'},
          {mimeType: 'image/jpg'}
        ];

        assert.equal(sa._determineContentCategory(items), 'images');
      });

      it('returns "video" if all mimeTypes are video', () => {
        const items = [
          {mimeType: 'video/h264'},
          {mimeType: 'video/vp8'}
        ];

        assert.equal(sa._determineContentCategory(items), 'videos');
      });

      it('returns "documents" if a whiteboard mimeType is found in item.actions', () => {
        const items = [
          {
            mimeType: 'image/png',
            actions: [{
              mimeType: 'application/x-cisco-webex-whiteboard',
              type: 'edit',
              url: 'https://boards.example.com/boards/1'
            }]
          }
        ];

        assert.equal(sa._determineContentCategory(items), 'documents');
      });
    });

    describe('#upload', () => {
      let webex;
      const fakeURL = `${process.env.ENCRYPTION_SERVICE_URL || 'https://encryption-a.wbx2.com'}/encryption/api/v1/keys/8a7d3d78-ce75-48aa-a943-2e8acf63fbc9`;

      before(() => {
        webex = new MockWebex({
          upload: sinon.stub().returns(Promise.resolve({body: {downloadUrl: fakeURL}}))
        });
      });

      it('checks whether filehash is sent in body while making a call to /finish API', () => {
        const spy = sinon.spy(webex.upload);
        const inputData = {
          phases: {
            initialize: {
              fileSize: 3333
            },
            finalize: {
              body: {
                fileSize: 3333,
                fileHash: '4ea5c508a6566e76240543f8feb06fd457777be39549c4016436afda65d2330e'
              }
            }
          }
        };

        spy(inputData);

        return assert.isTrue(spy.calledWith(inputData));
      });
    });
  });
});
